x <- [4,2,1]
x <- {4,2,1}
x <- 4
x + 10
remove.packages("Rcpp")
install.packages("diffusr")
library("diffusr")
# count of nodes
n <- 5
# starting distribution (has to sum to one)
p0    <- as.vector(rmultinom(1, 1, prob=rep(.2, n)))
# adjacency matrix (either normalized or not)
graph <- matrix(abs(rnorm(n*n)), n, n)
# computation of stationary distribution
pt    <- random.walk(p0, graph)
pt
library("msm")
library("dplyr")
library("igraph")
library("diffusr")
setwd("/home/eager/EAGER/data/orgs/workshop/depth0_boilerpipe/")
labels <- c("power|technolog|system", "thermoplast|use|long", "technolog|develop|new", "technolog|energi|celanes", "power|use|high")
in.depth0_topics <- read.csv("out_topics.csv", header = TRUE, stringsAsFactors = FALSE)
head(in.depth0_topics)
nrow(in.depth0_topics)
in.depth0_topics$main_topic <- in.depth0_topics$main_topic + 1
unique(in.depth0_topics$main_topic)
num_topics <- length(unique(in.depth0_topics$main_topic))
num_topics
cnt_by_topic <- in.depth0_topics %>% count(main_topic)
p0 <- cnt_by_topic$n / sum(cnt_by_topic$n)
groups <- in.depth0_topics %>% group_indices(firm_key)
in.depth0_topics$gid <- groups
# state table (msm)
head(in.depth0_topics)
st <- statetable.msm(main_topic, gid, data = in.depth0_topics)
rownames(st) <- colnames(st) <- labels
st
# igraph
net=graph.adjacency(st,mode="directed",weighted=TRUE,diag=FALSE)
# Compute node degrees (#links) and use that to set node size:
deg <- degree(net, mode="all")
V(net)$size <- deg*3
E(net)$width <- E(net)$weight * 2
E(net)$arrow.size <- .2
graph_attr(net, "layout") <- layout_with_lgl
plot.igraph(net,vertex.label=V(net)$name,layout=layout_with_lgl, edge.arrow.size=0.5, edge.curved=.4, vertex.label.color="black", edge.color="gray80",
vertex.color="light blue", vertex.frame.color="light blue", rescale=TRUE)
# msm
qm <- matrix(rep (1, num_topics^2), nrow=num_topics, ncol=num_topics)
diag(qm) <- 0
rownames(qm) <- colnames(qm) <- labels
qm
eager.msm <- msm(main_topic ~ para_order, subject = gid, data = in.depth0_topics, qmatrix = qm, exacttimes = TRUE, gen.inits=TRUE)
eager.msm
pt    <- random.walk(p0, st)
?random.walk
data.class(st)
pt    <- random.walk(p0, as.matrix(st))
data.class(st)
data.class(as.matrix(st))
install.packages("psych")
library("psych")
# diffusr random walk
st.matrix <- table2matrix (st, labs = labels)
st
data.class(st)
labels
# diffusr random walk
st.matrix <- table2matrix (st)
st.matrix
data.class
data.class(st)
matrix(st)
matrix(st, nrow=num_topics, ncol=num_topics)
st
remove.packages("psych")
# diffusr random walk
st.matrix <- matrix(st, nrow=num_topics, ncol=num_topics, labels=labels)
?matrix
# diffusr random walk
st.matrix <- matrix(st, nrow=num_topics, ncol=num_topics, dimnames=labels)
# diffusr random walk
st.matrix <- matrix(st, nrow=num_topics, ncol=num_topics, dimnames=c(labels, labels)
)
data.class(labels)
labels
list(labels)
list(labels, labels)
# diffusr random walk
st.matrix <- matrix(st, nrow=num_topics, ncol=num_topics, dimnames=list(labels, labels))
st.matrix
p0
pt    <- random.walk(p0, st.matrix)
pt
?random.walk
?random_walk
## Stationary distribution of a Markov chain
g <- make_ring(10, directed = TRUE) %u%
make_star(11, center = 11) + edge(11, 1)
ec <- eigen_centrality(g, directed = TRUE)$vector
pg <- page_rank(g, damping = 0.999)$vector
w <- random_walk(g, start = 1, steps = 10000)
g
net
w <- random_walk(net, start = 1, steps = 10000)
w
## Stationary distribution of a Markov chain
w <- random_walk(net, start = 1, steps = 10000, mode = "out")
w
## Stationary distribution of a Markov chain
w <- random_walk(net, start = 1, steps = 10, mode = "out")
w
table(w)
w
p0
## Stationary distribution of a Markov chain (igraph)
w <- random_walk(net, start = 3, steps = 10, mode = "out")
table (w)
## Stationary distribution of a Markov chain (igraph)
w <- random_walk(net, start = 3, steps = 1000, mode = "out")
ec <- eigen_centrality(net, directed = TRUE)$vector
## These are similar, but not exactly the same
cor(table(w), ec)
## But these are (almost) the same
cor(table(w), pg)
pg <- page_rank(net, damping = 0.999)$vector
## But these are (almost) the same
cor(table(w), pg)
## These are similar, but not exactly the same
cor(table(w), ec)
eager.msm1 <- msm(main_topic ~ para_order, subject = gid, data = in.depth0_topics, qmatrix = qm, exacttimes = TRUE, gen.inits=TRUE)
eager.msm1
View(in.depth0_topics)
head(in.depth0_topics)
eager.msm2 <- msm(main_topic ~ para_order, covariates = ~ num_words + prob ,subject = gid, data = in.depth0_topics, qmatrix = qm, exacttimes = TRUE, gen.inits=TRUE, control = list(fnscale = 4000, maxit = 10000))
eager.msm2
hazard.msm(eager.msm2)
lrtest.msm(eager.msm1, eager.msm2)
?hazard.msm
?msm
eager.msm1
# train base model
eager.msm1 <- msm(main_topic ~ para_order, subject = gid, data = in.depth0_topics, qmatrix = qm, gen.inits=TRUE)
eager.msm1
p0
# diffusr random walk
st.matrix <- matrix(st, nrow=num_topics, ncol=num_topics, dimnames=list(labels, labels))
st.matrix
pt    <- random.walk(p0, st.matrix)
pt <- random.walk(p0, st.matrix)
pt
st.matrix
?random.walk
p0
pt <- random.walk(p0, st.matrix, do.analytical = TRUE)
pt
p0
?c
w
table(w)
ec
?cor
st
plot.igraph(net,vertex.label=V(net)$name,layout=layout_with_lgl, edge.arrow.size=0.5, edge.curved=.4, vertex.label.color="black", edge.color="gray80",
vertex.color="light blue", vertex.frame.color="light blue", rescale=TRUE)
plot.igraph(net,vertex.label=V(net)$name,layout=layout_with_lgl, edge.arrow.size=1, edge.curved=.4, vertex.label.color="black", edge.color="gray80",
vertex.color="light blue", vertex.frame.color="light blue", rescale=TRUE)
E(net)$arrow.size <- 1
graph_attr(net, "layout") <- layout_with_lgl
plot.igraph(net,vertex.label=V(net)$name,layout=layout_with_lgl, edge.arrow.size=1, edge.curved=.4, vertex.label.color="black", edge.color="gray80",
vertex.color="light blue", vertex.frame.color="light blue", rescale=TRUE)
E(net)$arrow.size <- 3
graph_attr(net, "layout") <- layout_with_lgl
plot.igraph(net,vertex.label=V(net)$name,layout=layout_with_lgl, edge.curved=.4, vertex.label.color="black", edge.color="gray80",
vertex.color="light blue", vertex.frame.color="light blue", rescale=TRUE)
?eigen_centrality
qm
?msm
# base model
eager.msm1 <- msm(main_topic ~ para_order, subject = gid, data = in.depth0_topics, qmatrix = qm, gen.inits=TRUE)
# base model
eager.msm1 <- msm(main_topic ~ para_order, subject = gid, data = in.depth0_topics, exacttimes = TRUE, qmatrix = qm, gen.inits=TRUE)
eager.msm1
printold.msm
printold.msm(eager.msm1)
pmatrix.msm(eager.msm1, t = 1, ci = "normal")
pmatrix.msm(eager.msm1, t = 2, ci = "normal")
?pmatrix.msm
hazard.msm(eager.msm2)
# compare models
lrtest.msm(eager.msm1, eager.msm2)
